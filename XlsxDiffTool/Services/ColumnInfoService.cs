using System.Collections.ObjectModel;
using System.ComponentModel;
using XlsxDiffTool.Models;

namespace XlsxDiffTool.Services;

public sealed class ColumnInfoService : IDisposable
{
    private readonly DiffConfigModel optionsModel;
    private readonly ExcelDiffService excelDiffService;

    public ObservableCollection<ColumnInfoModel> Columns => optionsModel.Columns;

    public ColumnInfoService(DiffConfigModel optionsModel, ExcelDiffService excelDiffService)
    {
        this.optionsModel = optionsModel;
        this.excelDiffService = excelDiffService;
        optionsModel.PropertyChanged += OptionsModel_PropertyChanged;
        optionsModel.NewFileConfig.PropertyChanged += InputFileConfig_PropertyChanged;
        optionsModel.OldFileConfig.PropertyChanged += InputFileConfig_PropertyChanged;
    }

    public async Task LoadColumnsFromConfig(params ICollection<ColumnInfoModel> columsFromConfig)
    {
        var columnNames = await Task.Run(excelDiffService.GetColumnNames);
        var existingColumns = columnNames.ToDictionary(x => x, StringComparer.OrdinalIgnoreCase);
        Columns.Clear();
        foreach (ColumnInfoModel column in columsFromConfig)
        {
            column.IsNotMapped = !existingColumns.ContainsKey(column.Name);
            Columns.Add(column);
            existingColumns.Remove(column.Name);
        }
    }

    public void AddManualColumn(string columnName)
    {
        if (Columns.Any(x => x.Name.Equals(columnName, StringComparison.OrdinalIgnoreCase)))
        {
            return;
        }
        Columns.Add(new() { Name = columnName, IsNotMapped = true });
    }

    public void RemoveManualColumn(string columnName)
    {
        if (Columns.Any(x => x.Name.Equals(columnName, StringComparison.OrdinalIgnoreCase)))
        {
            Columns.Remove(Columns.First(x => x.Name.Equals(columnName, StringComparison.OrdinalIgnoreCase)));
        }
    }

    public async Task ReloadColumns()
    {
        var columnNames = await Task.Run(excelDiffService.GetColumnNames);
        UpdateWithColumnsFromFiles(columnNames);
    }

    public void Dispose()
    {
        optionsModel.PropertyChanged -= OptionsModel_PropertyChanged;
        optionsModel.NewFileConfig.PropertyChanged -= InputFileConfig_PropertyChanged;
        optionsModel.OldFileConfig.PropertyChanged -= InputFileConfig_PropertyChanged;
    }

    private void OptionsModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(DiffConfigModel.AddRowNumberColumn) || e.PropertyName == nameof(DiffConfigModel.RowNumberColumnName))
        {
            SetAutogeneratedColumn(ColumnKind.RowNumber, optionsModel.AddRowNumberColumn, optionsModel.RowNumberColumnName, "Row");
        }
        if (e.PropertyName == nameof(DiffConfigModel.AddWorksheetNameColumn) || e.PropertyName == nameof(DiffConfigModel.WorksheetNameColumnName))
        {
            SetAutogeneratedColumn(ColumnKind.WorksheetName, optionsModel.AddWorksheetNameColumn, optionsModel.WorksheetNameColumnName, "Worksheet name");
        }
        if (e.PropertyName == nameof(DiffConfigModel.AddDocumentNameColumn) || e.PropertyName == nameof(DiffConfigModel.DocumentNameColumnName))
        {
            SetAutogeneratedColumn(ColumnKind.DocumentName, optionsModel.AddDocumentNameColumn, optionsModel.DocumentNameColumnName, "Document name");
        }
    }

    private async void InputFileConfig_PropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(FileConfigModel.FilePath)
            || e.PropertyName == nameof(FileConfigModel.StartRow)
            || e.PropertyName == nameof(FileConfigModel.StartColumn))
        {
            if (!Columns.Any(x => x.ColumnKind != ColumnKind.Default))
            {
                await ReloadColumns();
            }
        }
    }

    private void UpdateWithColumnsFromFiles(ICollection<string> colomNamesFromFiles)
    {
        var existingColumns = Columns.ToDictionary(x => x.Name, StringComparer.OrdinalIgnoreCase);
        Columns.Clear();
        foreach (var columnName in colomNamesFromFiles)
        {
            if (!existingColumns.TryGetValue(columnName, out ColumnInfoModel? column))
            {
                column = new() { Name = columnName };
            }
            column.IsNotMapped = false;
            Columns.Add(column);
            existingColumns.Remove(columnName);
        }
        foreach (var column in existingColumns.Values.Where(x => x.ColumnKind != ColumnKind.Default))
        {
            Columns.Add(column);
        }
        foreach (var column in existingColumns.Values.Where(x => x.Mode != ColumnMode.Default))
        {
            column.IsNotMapped = true;
            Columns.Add(column);
        }
    }

    private void SetAutogeneratedColumn(ColumnKind columnKind, bool isEnabled, string name, string fallbackName)
    {
        var column = Columns.FirstOrDefault(x => x.ColumnKind == columnKind);
        if (isEnabled)
        {
            if (column is null)
            {
                column = new() { ColumnKind = columnKind };
                Columns.Add(column);
            }
            column.Name = string.IsNullOrWhiteSpace(name) ? fallbackName : name;
        }
        else if (column is not null)
        {
            Columns.Remove(column);
        }
    }
}
